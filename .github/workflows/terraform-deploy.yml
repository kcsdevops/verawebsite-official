name: Deploy Infrastructure

on:
  push:
    branches: [ main, master ]
    paths: [ 'terraform/**' ]
  workflow_dispatch:

env:
  TF_VERSION: '1.5.0'
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Deploy Infrastructure
    defaults:
      run:
        working-directory: terraform
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Terraform Format Check
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve tfplan

      - name: Get Static Web App API Token
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        id: swa-token
        run: |
          TOKEN=$(terraform output -raw static_web_app_api_key)
          echo "::add-mask::$TOKEN"
          echo "swa_token=$TOKEN" >> $GITHUB_OUTPUT

      - name: Update Repository Secret
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          script: |
            const sodium = require('tweetsodium');
            
            // Get repository public key
            const { data: publicKey } = await github.rest.actions.getRepoPublicKey({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            
            // Encrypt the secret
            const messageBytes = Buffer.from('${{ steps.swa-token.outputs.swa_token }}');
            const keyBytes = Buffer.from(publicKey.key, 'base64');
            const encryptedBytes = sodium.seal(messageBytes, keyBytes);
            const encryptedValue = Buffer.from(encryptedBytes).toString('base64');
            
            // Create or update the secret
            await github.rest.actions.createOrUpdateRepoSecret({
              owner: context.repo.owner,
              repo: context.repo.repo,
              secret_name: 'AZURE_STATIC_WEB_APPS_API_TOKEN',
              encrypted_value: encryptedValue,
              key_id: publicKey.key_id,
            });
            
            console.log('Successfully updated AZURE_STATIC_WEB_APPS_API_TOKEN secret');